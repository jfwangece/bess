#
# Test NF chain #5: a stateful NF chain used by Dyssect
# NAT -> Snort
#

nic=int($BESS_NIC!'1')
burst_size=int($BESS_BURST!'32')
acl_cnt=int($BESS_ACL!'2000')
lb_cnt=int($BESS_LB!'100')
slo = int($BESS_SLO!"200000")
long_update_stats_period = int($BESS_LSTATS_PERIOD!"100000000")
short_epoch_period = int(slo / 2)
exp_idx = int($BESS_EXP!"1")

# By default, pick MLX NICs
pcie0, offset0="af:00.0", 7 # XL710
if nic != 0:
    pcie0, offset0="5e:00.0", 1 # MLX

# NFVCtrl runs on its own core
nfvctrl_core = 15

core_addrs = [
    {'l2_port': 0, 'l2_mac': '82:a3:ae:74:72:30'},
    {'l2_port': 1, 'l2_mac': 'a2:87:fd:f8:72:21'},
    {'l2_port': 2, 'l2_mac': '2e:c7:8b:7b:8d:a8'},
    {'l2_port': 3, 'l2_mac': '2a:9d:fd:13:15:01'},
    {'l2_port': 4, 'l2_mac': '32:a5:0f:e0:04:0b'},
    {'l2_port': 5, 'l2_mac': '06:8a:62:fb:51:51'},
    {'l2_port': 6, 'l2_mac': 'ce:2e:14:c4:a0:cb'},
    {'l2_port': 7, 'l2_mac': '6e:af:01:7a:93:6f'},
    {'l2_port': 8, 'l2_mac': '00:af:01:7a:93:6f'},
]
core_cnt=10
rcore_cnt=0
total_core_cnt = core_cnt + rcore_cnt
cores = [i for i in range(core_cnt)]
rcores = [core_cnt + i for i in range(rcore_cnt)]
print("total cores: %d" %(total_core_cnt))
print("%d normal cores: %s; %d reserved core: %s (w/o core offset)" %(len(cores), cores, len(rcores), rcores))

acl_rules = []
for i in range(acl_cnt / 50):
    for j in range(50):
        acl_rules.append({'src_ip': '10.0.%d.%d/32' %(i+1, j+1), 'drop': True})
acl_rules.append({'src_ip': '0.0.0.0/0', 'drop': False})

nat_hosts = []
for i in range(lb_cnt / 20):
    for j in range(20):
        nat_hosts.append({'endpoint': '192.168.%d.%d' %(i/255, i%255)})

# Module
nfvctrl::NFVCtrl(core_addrs=core_addrs, slo_ns=slo,
    long_epoch_period_ns=long_update_stats_period,
    nf_long_term_profile="nf_profiles/long_term_psize1050_slo100.pro")
port0::PMDPort(pci=pcie0,
    num_inc_q=core_cnt, num_out_q=total_core_cnt, bench_rss=False)
pinc0 = {}
pout0 = {}
fw = {}
lb = {}
monitor = {}
nfvig = {}
nfvmo = {}

# Pipeline
for i in cores:
    pout0[i] = QueueOut(port=port0, qid=i)
    #pout0[i] = Sink()
    fw[i] = FlowACL(rules=acl_rules)
    lb[i] = FlowLB(endpoints=nat_hosts)
    monitor[i] = FlowCounter()

    if exp_idx == 0:
        pinc0[i] = NFVCore(core_id=i, port=port0, qid=i, short_epoch_period_ns=short_epoch_period)
        nfvmo[i] = NFVMonitor(core_id=i, short_epoch_period_ns=short_epoch_period)
        pinc0[i] -> nfvmo[i] -> pout0[i]
    elif exp_idx == 1:
        # Default: Chain 4 w/ NFVMonitor
        pinc0[i] = NFVCore(core_id=i, port=port0, qid=i, short_epoch_period_ns=short_epoch_period)
        nfvmo[i] = NFVMonitor(core_id=i, short_epoch_period_ns=short_epoch_period)
        pinc0[i] -> fw[i] -> lb[i] -> monitor[i] -> nfvmo[i] -> pout0[i]
    elif exp_idx == 2:
        # Comparison: Chain 4 w/ QueueInc
        pinc0[i] = QueueInc(port=port0, qid=i)
        nfvmo[i] = NFVMonitor(core_id=i, short_epoch_period_ns=short_epoch_period)
        pinc0[i] -> fw[i] -> lb[i] -> monitor[i] -> nfvmo[i] -> pout0[i]
    elif exp_idx == 3:
        pinc0[i] = QueueInc(port=port0, qid=i)
        pinc0[i] -> fw[i] -> lb[i] -> monitor[i] -> pout0[i]
    else:
        pinc0[i] = QueueInc(port=port0, qid=i)
        nfvmo[i] = NFVMonitor(core_id=i, short_epoch_period_ns=short_epoch_period)
        pinc0[i] -> nfvmo[i] -> pout0[i]

for i in rcores:
    pinc0[i] = NFVRCore(core_id=i)
    pout0[i] = QueueOut(port=port0, qid=i)
    pinc0[i] -> MACSwap() -> pout0[i]

# Burst
for i in cores:
    pinc0[i].set_burst(burst=burst_size)
for i in rcores:
    pinc0[i].set_burst(burst=burst_size)

# Core
bess.add_worker(wid=nfvctrl_core, core=nfvctrl_core)
nfvctrl.attach_task(wid=nfvctrl_core)
for i in cores:
    bess.add_worker(wid=i, core=i + offset0)
    pinc0[i].attach_task(wid=i)
    #bess.add_tc('pr%d' %(i), policy='priority', wid=i)
    #pinc0[i].attach_task(parent='pr%d' %(i), priority=100)
for i in rcores:
    bess.add_worker(wid=i, core=i + offset0)
    pinc0[i].attach_task(wid=i)

bess.resume_all()
