#
# This is a traffic generator that produces one type of packet
#
# Example:
# $ run nfvctrl/pktgen BESS_BURST=32,BESS_PKT_LIMIT=100000000,BESS_PKT_RATE=2000000
#

import copy
import scapy.all as scapy

SOCKET0_CPU = [0,2,4,6,8,10,12,14,16,18]
SOCKET1_CPU = [1,3,5,7,9,11,13,15,17,19]
PACKET_OVERHEAD=24

# This script generates a number of flows at a specified packet rate.
pcie0, socket0 = '05:00.0', SOCKET1_CPU
burst_size = int($BESS_BURST!'4')
num_cores = int($BESS_CORE!'1')
pkt_limit=int($BESS_PKT_LIMIT!'100000000')
pkt_size=int($BESS_PKT_SIZE!'100')
base_pkt_rate=int($BESS_PKT_RATE!'2000000')
ts_offset = 72

assert(pcie0)
assert(1 <= num_cores <= 16)
assert(60 <= pkt_size <= 1522)
assert(64 <= ts_offset <= 100)

pkt_size = min(pkt_size, 1500)

src_ether = 'ec:0d:9a:67:ff:68'
dst_ether = '0a:14:69:37:5f:f2'
src_ip = '204.57.0.1'
dst_ip = '68.128.0.1'
src_port = 10001
dst_port = 8080

# Create a "template" packet to use for generated flows.
# All packets in flow will follow this formula; flowgen
# changes dst IP to generate new connections.
eth = scapy.Ether(src=src_ether, dst=dst_ether)
ip = scapy.IP(src=src_ip, dst=dst_ip)
tcp = scapy.TCP(sport=src_port, dport=dst_port)
payload = ('FaaS-NFV is cool.' + '0123456789' * 200)[:pkt_size-len(eth/ip/tcp)-PACKET_OVERHEAD]
pkt = eth/ip/tcp/payload
pkt_data = bytes(pkt)
print("Packet size = %d bytes" %(len(pkt_data)))

port0::PMDPort(pci=pcie0, num_inc_q=1, num_out_q=num_cores)
port_inc::PortInc(port=port0)

flowgens = dict()
queues = dict()
lc_egress::LossCounter(port_index=0, port_type=0)
lc_ingress::LossCounter(port_index=0, port_type=1)

for i in range(num_cores):
    flowgens[i] = Source()
    queues[i] = Queue()
    flowgens[i] -> Rewrite(templates=[pkt_data]) -> lc_egress -> Timestamp(offset=ts_offset) -> queues[i] -> QueueOut(port=port0, qid=i)
    queues[i].set_burst(burst=burst_size)

port_inc -> Measure(offset=ts_offset) -> lc_ingress -> Sink()

lc_egress.start(packet_count_offset=0, packet_count_target=pkt_limit)

bess.add_worker(wid=1, core=socket0[1])
port_inc.attach_task(wid=1)

for wid in range(num_cores):
    bess.add_worker(wid=2*wid+2, core=socket0[2*wid+2])
    bess.add_worker(wid=2*wid+3, core=socket0[2*wid+3])
    bess.add_tc('rl%d' %(wid),
                policy='rate_limit',
                resource='packet',
                limit={'packet': int(base_pkt_rate/num_cores)},
                wid=2*wid+2)
    flowgens[wid].attach_task(parent='rl%d' %(wid))
    queues[wid].attach_task(wid=2*wid+3)

bess.resume_all()
