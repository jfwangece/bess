#
# This script is a profiling pipeline that studies the
# per-packet cost of an NF chain under different
# (concurrent flows, total packet rate).
#
# Example:
# # run nfvctrl/profile_chain4 BESS_PKT_RATE=1000000,BESS_FLOW=1000
#

import copy
import scapy.all as scapy

PACKET_OVERHEAD=24
TS_OFFSET = 72

# This script generates a number of flows at a specified packet rate.
num_cores = int($BESS_CORE!'3')
pkt_size=int($BESS_PKT_SIZE!'100')
num_flows=int($BESS_FLOW!'1000')
traffic_pattern=int($BESS_TRAFFIC_DIST!'1')
flow_time=int($BESS_FLOW_TIME!'10') # in Seconds
base_pkt_rate=int($BESS_PKT_RATE!'10000000')
base_bit_rate=int($BESS_BIT_RATE!'100000000000')

# NF-specifc parameters
burst_size = int($BESS_BURST!'32')
acl_cnt=int($BESS_ACL!'2000')
lb_cnt=int($BESS_LB!'100')

assert(1 <= num_cores <= 16)
assert(60 <= pkt_size <= 1522)
assert(0 <= traffic_pattern <= 1)
assert(64 <= TS_OFFSET <= 100)

pkt_size = min(pkt_size, base_bit_rate / base_pkt_rate / 8)
if traffic_pattern == 0:
    arrival_dist = "uniform"
    duration_dist = "uniform"
elif traffic_pattern == 1:
    arrival_dist = "exponential"
    duration_dist = "pareto"
else:
    print("Incorrect traffic pattern")

# Each flowgen has its own unique set of flows
def get_pkt_template(core_id):
    src_ether = 'ec:0d:9a:67:ff:68'
    dst_ether = '0a:14:69:37:5f:f2'
    src_ip = '204.57.%d.1' %(core_id)
    dst_ip = '68.128.%d.1' %(core_id)
    src_port = 10001
    dst_port = 8080
    # Create a "template" packet to use for generated flows.
    # All packets in flow will follow this formula; flowgen
    # changes dst IP to generate new connections.
    eth = scapy.Ether(src=src_ether, dst=dst_ether)
    ip = scapy.IP(src=src_ip, dst=dst_ip)
    tcp = scapy.TCP(sport=src_port, dport=dst_port)
    payload = ('FaaS-NFV is cool.' + '0123456789' * 200)[:pkt_size-len(eth/ip/tcp)-PACKET_OVERHEAD]
    pkt = eth/ip/tcp/payload
    pkt_data = bytes(pkt)
    print("Packet size = %d bytes" %(len(pkt_data)))
    return pkt_data

flowgens = dict()
queue::Queue(size=4096)

for i in range(num_cores):
    pkt_data = get_pkt_template(i)
    print(num_flows / flow_time / num_cores)
    flowgens[i] = FlowGen(template = pkt_data, \
        pps = base_pkt_rate / num_cores, \
        flow_rate = num_flows / flow_time / num_cores, \
        flow_duration = flow_time, \
        arrival = arrival_dist, duration = duration_dist, \
        quick_rampup = True, \
        ip_src_range = 255, ip_dst_range = 255, \
        ignore_synfin=False)
    flowgens[i] -> Timestamp(offset=TS_OFFSET) -> queue

acl_rules = []
for i in range(acl_cnt / 50):
    for j in range(50):
        acl_rules.append({'src_ip': '10.0.%d.%d/32' %(i+1, j+1), 'drop': True})
acl_rules.append({'src_ip': '0.0.0.0/0', 'drop': False})

nat_hosts = []
for i in range(lb_cnt / 20):
    for j in range(20):
        nat_hosts.append({'endpoint': '192.168.%d.%d' %(i/255, i%255)})

fw::FlowACL(rules=acl_rules)
lb::FlowLB(endpoints=nat_hosts)
monitor::FlowCounter()
nfvmo::NFVMonitor(core_id=0)

queue -> fw -> lb -> monitor -> MACSwap() -> Measure(offset=TS_OFFSET) -> nfvmo -> Sink()

# configure burst size
queue.set_burst(burst=burst_size)

offset = 3
for wid in range(num_cores):
    cid = wid + offset
    bess.add_worker(wid=wid, core=cid)
    flowgens[wid].attach_task(wid=wid)

nf_core = num_cores + offset
bess.add_worker(wid=nf_core, core=nf_core)
queue.attach_task(wid=nf_core)
