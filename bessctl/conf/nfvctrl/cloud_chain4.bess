#
# Test NF chain #4: a stateful NF chain
# ACL -> LB -> Monitor
#

wid = int($BESS_WID!"0")
pcie0 = $BESS_DEV!"81:00.0"
experiment_index = int($BESS_EXP_ID!"0")
pipeline_index = int($BESS_PIPELINE_ID!"1")
offset0 = 1

# the traffic generator's routing information
traffic_ip = "10.10.1.1"
traffic_mac = $TRAFFIC_MAC!"b8:ce:f6:d2:3b:1a"

slo = int($BESS_SLO!"200000")
short_profile = $BESS_SPROFILE!"/local/bess/nf_profiles/short_term.pro"
long_profile = $BESS_LPROFILE!"/local/bess/nf_profiles/long_term_psize1050_slo100.pro"

burst_size=int($BESS_BURST!'32')
acl_cnt=int($BESS_ACL!'2000')
lb_cnt=int($BESS_LB!'100')
long_epoch_period = int($BESS_LSTATS_PERIOD!"1000000000")
short_epoch_period = int(slo / 2)
ncore = int($BESS_NCORE!"8")
queue_scale = 1

# NFVCtrl runs on its own core
nfvctrl_core = 25
core_cnt = ncore
rcore_cnt = nfvctrl_core - (1 + ncore)
total_core_cnt = core_cnt + rcore_cnt
cores = [i for i in range(core_cnt)]
rcores = [core_cnt + i for i in range(rcore_cnt)]
print("total cores: %d" %(total_core_cnt))
print("{} normal cores: {}".format(len(cores), cores))
print("{} reserved cores: {}".format(len(rcores), rcores))

acl_rules = []
for i in range(acl_cnt / 50):
    for j in range(50):
        acl_rules.append({'src_ip': '10.0.%d.%d/32' %(i+1, j+1), 'drop': True})
acl_rules.append({'src_ip': '0.0.0.0/0', 'drop': False})

nat_hosts = []
for i in range(lb_cnt / 20):
    for j in range(20):
        nat_hosts.append({'endpoint': '192.168.%d.%d' %(i/255, i%255)})

# Module
# nfvctrl must be declared before PMDPort 
nfvctrl::NFVCtrl(wid=wid, ncore=core_cnt, rcore=rcore_cnt, qid=total_core_cnt,
                slo_ns=slo,
                long_epoch_period_ns=long_epoch_period,
                nf_short_term_profile=short_profile, nf_long_term_profile=long_profile,
                exp_id=experiment_index)

port0::PMDPort(pci=pcie0,
    num_inc_q=core_cnt,
    num_out_q=total_core_cnt+1,
    bench_rss=False)

pinc0 = {}
pout0 = {}
fw = {}
lb = {}
monitor = {}
nfvig = {}
nfvmo = {}

# Pipeline
for i in cores:
    pout0[i] = QueueOut(port=port0, qid=i)
    fw[i] = FlowACL(rules=acl_rules)
    lb[i] = FlowLB(endpoints=nat_hosts)
    monitor[i] = FlowCounter()

    if pipeline_index == 0:
        pinc0[i] = NFVCore(core_id=i, port=port0, qid=i, short_epoch_period_ns=short_epoch_period)
        nfvmo[i] = NFVMonitor(core_id=i)
        pinc0[i] -> nfvmo[i] -> pout0[i]
    elif pipeline_index == 1:
        # Default: Chain 4 w/ NFVMonitor
        pinc0[i] = NFVCore(core_id=i, port=port0, qid=i, short_epoch_period_ns=short_epoch_period, large_queue_scale=queue_scale)
        nfvmo[i] = NFVMonitor(core_id=i)
        pinc0[i] -> fw[i] -> lb[i] -> monitor[i] -> nfvmo[i] -> IPRewrite(dst_eth=traffic_mac, dst_ip=traffic_ip) -> pout0[i]
    elif pipeline_index == 2:
        # Comparison: Chain 4 w/ QueueInc
        pinc0[i] = QueueInc(port=port0, qid=i)
        nfvmo[i] = NFVMonitor(core_id=i)
        pinc0[i] -> fw[i] -> lb[i] -> monitor[i] -> nfvmo[i] -> pout0[i]
    elif pipeline_index == 3:
        pinc0[i] = QueueInc(port=port0, qid=i)
        pinc0[i] -> fw[i] -> lb[i] -> monitor[i] -> pout0[i]
    else:
        pinc0[i] = QueueInc(port=port0, qid=i)
        nfvmo[i] = NFVMonitor(core_id=i)
        pinc0[i] -> nfvmo[i] -> pout0[i]

for i in rcores:
    pinc0[i] = NFVRCore(core_id=i-core_cnt)
    pout0[i] = QueueOut(port=port0, qid=i)
    pinc0[i] -> FlowACL(rules=acl_rules) -> FlowLB(endpoints=nat_hosts) -> FlowCounter() -> IPRewrite(dst_eth=traffic_mac, dst_ip=traffic_ip) -> pout0[i]

# Burst
for i in cores:
    pinc0[i].set_burst(burst=burst_size)
for i in rcores:
    pinc0[i].set_burst(burst=burst_size)

# Core
bess.add_worker(wid=nfvctrl_core, core=nfvctrl_core)
nfvctrl.attach_task(wid=nfvctrl_core)
for i in cores:
    bess.add_worker(wid=i, core=i + offset0)
    pinc0[i].attach_task(wid=i)
for i in rcores:
    bess.add_worker(wid=i, core=i + offset0)
    pinc0[i].attach_task(wid=i)

bess.resume_all()
