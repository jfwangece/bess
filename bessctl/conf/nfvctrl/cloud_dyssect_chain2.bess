#!/usr/bin/env python

import math
import time
import scapy.all as scapy

################################################################################################
#
wid = int($BESS_WID!"0")
node_type = $BESS_NODE_TYPE!"c6525"
experiment_index = int($BESS_EXP_ID!"0")

if node_type == "r6525":
    pcie0 = "81:00.0"
elif node_type == "c6525":
    pcie0 = "41:00.0"
else:
    raise Exception("node type is not supported")

# the traffic generator's routing information
traffic_ip = "10.10.1.1"
traffic_mac = $TRAFFIC_MAC!"b8:ce:f6:d2:3b:1a"

# NF-specific
acl_cnt=int($BESS_ACL!'2000')
ids_cnt=int($BESS_IDS!'100')

# org dyssect inputs
slo_ns              = float($BESS_SLO!"100000") # 100 us
shards              = int($SHARDS!"64")
sfc_length          = int($SFC_LENGTH!"3")
total_cores         = 20
dyssect_ctrl_core   = int($CONTROLLER_CORE!"22")
pipe_dir            = "."
input_para          = float($INPUT_PARA!"10.0")
#
################################################################################################

core_list       = [i for i in range(1, total_cores + 1, 1)]
queues          = len(core_list)

pincoming       = PMDPort(pci=pcie0, num_inc_q=queues, num_out_q=2*queues)
poutgoing       = pincoming

# Module configurations
acl_rules = []
for i in range(acl_cnt / 50):
    for j in range(50):
        acl_rules.append({'src_ip': '10.0.%d.%d/32' %(i+1, j+1), 'drop': True})
acl_rules.append({'src_ip': '0.0.0.0/0', 'drop': False})

blacklist_rules = [
    {'host': 'www.%d.com' % i, 'path': '/'} for i in range(ids_cnt)]

bess.pause_all()

# Module
controller0::DyssectController(port=pincoming.name, sfc_length=sfc_length, total_shards=shards, pipe_directory=pipe_dir, cores=core_list)

bess.add_worker(wid=dyssect_ctrl_core, core=dyssect_ctrl_core)
bess.attach_task(module_name=controller0.name, wid=dyssect_ctrl_core)

for i in range(queues):
    name='w%d' % (i)
    w=DyssectWorkingCore(name=name, port=pincoming, sfc_length=sfc_length, total_shards=shards, qid=i, id=i)

    w -> \
        FlowACL(rules=acl_rules) -> UrlFilter(blacklist=blacklist_rules) -> Bypass(cycles_per_packet=1500) -> \
        IPRewrite(dst_eth=traffic_mac, dst_ip=traffic_ip) -> \
        QueueOut(port=poutgoing, qid=i)

    controller0.add_working(name=w.name, tc='!leaf_' + name + ':0', wid=i)

n = queues/2
for i in range(n):
    name='o%d' % (i)
    o=DyssectOffloadingCore(name=name, id=128+i)

    o -> \
        FlowACL(rules=acl_rules) -> UrlFilter(blacklist=blacklist_rules) -> Bypass(cycles_per_packet=1500) -> \
        IPRewrite(dst_eth=traffic_mac, dst_ip=traffic_ip) -> \
        QueueOut(port=poutgoing, qid=queues+i)

    controller0.add_offloading(name=o.name, tc='!leaf_' + name + ':0', wid=queues+i)

slo = slo_ns * 1e-9
controller0.set_slo_p(slo=slo)
controller0.set_slo_r(slo=slo)
controller0.set_ca_p(cv=input_para)
controller0.set_cs_p(cv=input_para)
controller0.set_ca_r(cv=input_para)
controller0.set_cs_r(cv=input_para)

bess.resume_worker(dyssect_ctrl_core)
controller0.start()
