#
# This script is used to read a packet trace from a pcap file,
# and generates packets in a busy loop.
#
# Requirements:
# (1) set CONFIG_RTE_LIBRTE_PMD_PCAP=y and recompile DPDK, see https://doc.dpdk.org/guides/nics/pcap_ring.html
# (2) increase Queue size in queue.cc and recompile BESS:
#

PCAPFILE = $PCAP!"./experiment_conf/equinix-nyc.dirA.20190117-125910.UTC.short.pcap"
assert PCAPFILE
print("Target PCAP file: %s" %(PCAPFILE))

playback_rate_mpps = float($BESS_PKT_RATE!"0.0")
playback_rate_mbps = float($BESS_BIT_RATE!"0.0")
playback_speed = float($BESS_SPEED!"1")
playback_speed_conf = $BESS_RATE_CONF!"./experiment_conf/pcap_dynamics_0.conf"
burst_size=int($BESS_BURST!'32')
tag_offset = 72
pcap_file = '{}'.format(PCAPFILE)

pcap_port = PCAPReader(dev='{}'.format(pcap_file), offset=tag_offset, timestamp=True)
src = PortInc(port=pcap_port)
queue = Queue(size=pow(2,24))
if playback_rate_mpps > 0:
    replayer = Replayer(offset=tag_offset, rate_mpps=playback_rate_mpps)
elif playback_rate_mbps > 0:
    replayer = Replayer(offset=tag_offset, rate_mbps=playback_rate_mbps)
elif len(playback_speed_conf) > 0:
    replayer = Replayer(offset=tag_offset, dynamic_traffic_conf=playback_speed_conf)
else:
    replayer = Replayer(offset=tag_offset, speed=playback_speed)

src -> queue -> replayer -> Sink()

queue.set_burst(burst=burst_size)

bess.add_worker(wid=1, core=1)
bess.add_worker(wid=2, core=2)
src.attach_task(wid=1)

queue.attach_task(wid=2)
#bess.add_tc('rl', policy='rate_limit', resource='packet', limit={'packet': 100000000}, wid=2)
#queue.attach_task(parent='rl')

bess.resume_all()
