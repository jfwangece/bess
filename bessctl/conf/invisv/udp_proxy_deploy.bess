# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Deploy INVISV UDP proxy with 1 DPDK NIC

import scapy.all as scapy
import socket

pcie0 = $BESS_DEV!"19:00.0"
num_cores = int($BESS_CORES!"2")
assert(num_cores >= 2)
num_proxy_cores = num_cores - 1
proxy_ip = $BESS_IP!"127.0.0.1"
proxy_port = int($BESS_PORT!"12345")
next_proxy_ip = $BESS_NEXT_IP!"127.0.0.1"
next_proxy_port = int($BESS_NEXT_PORT!"12345")

# PMD RSS configuration
# Note: 1 more tx queue for sending out ARP packets
port0::PMDPort(pci=pcie0, num_inc_q=num_proxy_cores, num_out_q=num_cores)

# INVISV UDP proxy configuration
udp_proxy::INVISVUDPProxy()
udp_proxy.set_proxy(proxy_addr=proxy_ip, proxy_port=proxy_port)
udp_proxy.set_next_hop_proxy(proxy_addr=next_proxy_ip, proxy_port=next_proxy_port)
udp_proxy.set_client(client_addr='192.168.0.1', allow=True)

arp_q::Queue()
arp::ArpResponder()
arp.add(ip=proxy_ip, mac_addr='e4:43:4b:90:2b:53')

# Cores have to be added before WorkerSplit is created
for i in range(1, num_cores+1):
    bess.add_worker(i, i)

ws::WorkerSplit()

source = {}
sink = {}
wm = {}
for i in range(1, num_cores):
    source[i] = QueueInc(port=port0, qid=i-1)
    sink[i] = QueueOut(port=port0, qid=i-1)
    wm[i] = WildcardMatch(fields=[{'offset':12, 'num_bytes':2}])
    wm[i].add(values=[{'value_int':0x0800}],
        masks=[{'value_int':0xffff}], gate=0)
    wm[i].add(values=[{'value_int':0x0806}],
        masks=[{'value_int':0xffff}], gate=1)

    # Connect modules
    source[i] -> wm[i]
    wm[i]:0 -> udp_proxy
    wm[i]:1 -> arp_q

# Split workers for downstream modules
udp_proxy -> ws
for i in range(1, num_cores):
    ws:i -> MACSwap() -> sink[i]

# ARP response on the last tx queue
arp_q -> arp -> QueueOut(port=port0, qid=num_cores-1)

# CPU core assignment
for i in range(1, num_cores):
    source[i].attach_task(wid=i)
arp_q.attach_task(wid=num_cores)
